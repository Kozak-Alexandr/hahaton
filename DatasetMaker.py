# -*- coding: utf-8 -*-
"""Hackaton notebook #2 (pobochnyi).ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18n7XbbAsj8q9A27g3SiW3Wf80kdAbnp8
"""

import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.preprocessing import StandardScaler



"""ФИЛЬТР"""

"""
@file sobel_demo.py
@brief Sample code using Sobel and/or Scharr OpenCV functions to make a simple Edge Detector
"""
import sys
import cv2 as cv


## [variables]
# First we declare the variables we are going to use
window_name = ('Sobel Demo - Simple Edge Detector')
scale = 1
delta = 0
ddepth = cv.CV_16S

src = cv.imread('/content/Train_data/11.png', cv.IMREAD_COLOR)

src = cv.GaussianBlur(src, (3, 3), 0)

gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)

grad_x = cv.Sobel(gray, ddepth, 1, 0, ksize=3, scale=scale, delta=delta, borderType=cv.BORDER_DEFAULT)

grad_y = cv.Sobel(gray, ddepth, 0, 1, ksize=3, scale=scale, delta=delta, borderType=cv.BORDER_DEFAULT)
## [sobel]

## [convert]
# converting back to uint8
abs_grad_x = cv.convertScaleAbs(grad_x)
abs_grad_y = cv.convertScaleAbs(grad_y)
## [convert]

## [blend]
## Total Gradient (approximate)
grad = cv.addWeighted(abs_grad_x, 0.75, abs_grad_y, 0.75, 0)


plt.imshow(grad, cmap='gray')
grad.shape



from google.colab import drive
drive.mount('/content/drive/')

cv.imread("/content/Train_data/9.png")

plt.imshow("/content/Train_data/9.png")

from PIL import Image
import numpy


img= Image.open("/content/Train_data/9.png")
np_img = numpy.array(img)

print(np_img.shape)
plt.imshow(np_img, cmap='gray')

from PIL import Image, ImageEnhance
#read the image
im = Image.open("/content/Train_data/9.png")

#image brightness enhancer
enhancer = ImageEnhance.Contrast(im)
enhancer = enhancer.image.convert("RGBA")

factor = 1 #gives original image
im_output = enhancer.enhance(factor)
im_output.save('original-image.png')

# factor = 1.5 #increase contrast
# im_output = enhancer.enhance(factor)
# im_output.save('more-contrast-image.png')

from PIL import Image, ImageEnhance, ImageFilter
import cv2

image = Image.open('/content/drive/MyDrive/Training_data_17.09.2023/Train/9.png')
image = image.convert("RGBA")



enhancer = ImageEnhance.Sharpness(image)
factor = 5
im_s_1 = enhancer.enhance(factor)
display(im_s_1)
display(image)
# im_s_1.save('sharpened-image.png');

# image = Image.open('/content/Train_data/10.png')
contrast = ImageEnhance.Contrast(im_s_1)
mew_image = contrast.enhance(20)
display(mew_image)


# blurred = mew_image.filter(ImageFilter.GaussianBlur(1))
# display(blurred)
# image.show()

# plt.imshow(image)
# image.save('/content/Train_data/11.png')
# blurred.save('/content/Train_data/11.png')
mew_image.save('/content/Train_data/11.png')


# sobelxy = cv2.Sobel(mew_image, ddepth=cv2.CV_64F, dx=1, dy=1, ksize=5)
# display(sobelxy)

# blurred_image = original_image.filter(ImageFilter.BLUR)


sobelxy = cv2.Sobel(img, ddepth=cv2.CV_64F, dx=1, dy=1, ksize=5)

import cv2
import PIL
image = cv2.imread('/content/drive/MyDrive/Training_data_17.09.2023/Train/9.png') # loads an image from the specified file
# convert an image from one color space to another
grey_img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
invert = cv2.bitwise_not(grey_img) # helps in masking of the image
plt.imshow(invert)
# sharp edges in images are smoothed while minimizing too much blurring
blur = cv2.GaussianBlur(invert, (21, 21), 0)
# plt.imshow(blur, cmap='gray')
invertedblur = cv2.bitwise_not(blur)
plt.imshow(invertedblur, cmap='gray')
sketch = cv2.divide(grey_img, invertedblur, scale=256.0)


mew_sketch = PIL.Image.fromarray(sketch)

contrast = ImageEnhance.Contrast(mew_sketch)
mew_image = contrast.enhance(20)
display(mew_image)

# plt.imshow(mew_image, cmap='gray')

for i in range(1, 16):
  image = cv2.imread(('/content/drive/MyDrive/Training_data_17.09.2023/Train/' + str(i) + '.png'))
  print(i)
  grey_img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  invert = cv2.bitwise_not(grey_img)

  blur = cv2.GaussianBlur(invert, (21, 21), 0)
  invertedblur = cv2.bitwise_not(blur)
  sketch = cv2.divide(grey_img, invertedblur, scale=256.0)


  mew_sketch = PIL.Image.fromarray(sketch)

  contrast = ImageEnhance.Contrast(mew_sketch)
  mew_image = contrast.enhance(20)
  # display(mew_image)

  # plt.imshow(mew_image, cmap='gray')
  mew_image.save('/content/drive/MyDrive/Training_data_17.09.2023/Test-sketches/' + str(i) + '.png')

image = cv2.imread('/content/drive/Training_data_17.09.2023/Apple/7.png')
display(image)

from google.colab import drive
drive.mount('/content/drive')

